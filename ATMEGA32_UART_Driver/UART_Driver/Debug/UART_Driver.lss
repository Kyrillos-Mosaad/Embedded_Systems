
UART_Driver.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000023c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  0000023c  000002d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800062  00800062  000002d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000340  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d53  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000833  00000000  00000000  000011b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007d3  00000000  00000000  000019e6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002f0  00000000  00000000  000021bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000053d  00000000  00000000  000024ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006a0  00000000  00000000  000029e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00003089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 a6 00 	jmp	0x14c	; 0x14c <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 e2 00 	jmp	0x1c4	; 0x1c4 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e3       	ldi	r30, 0x3C	; 60
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 36       	cpi	r26, 0x64	; 100
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cb 00 	call	0x196	; 0x196 <main>
  8a:	0c 94 1c 01 	jmp	0x238	; 0x238 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_KICK>:
void LCD_GOTO_XY(unsigned char line, unsigned char position)
{
	if(line == 1)
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
	else if(line == 2)
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
  92:	88 b3       	in	r24, 0x18	; 24
  94:	87 7f       	andi	r24, 0xF7	; 247
  96:	88 bb       	out	0x18, r24	; 24
  98:	2f e9       	ldi	r18, 0x9F	; 159
  9a:	86 e8       	ldi	r24, 0x86	; 134
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	80 40       	sbci	r24, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <LCD_KICK+0xc>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <LCD_KICK+0x16>
  a8:	00 00       	nop
  aa:	88 b3       	in	r24, 0x18	; 24
  ac:	88 60       	ori	r24, 0x08	; 8
  ae:	88 bb       	out	0x18, r24	; 24
  b0:	08 95       	ret

000000b2 <LCD_isbusy>:
  b2:	1a ba       	out	0x1a, r1	; 26
  b4:	88 b3       	in	r24, 0x18	; 24
  b6:	84 60       	ori	r24, 0x04	; 4
  b8:	88 bb       	out	0x18, r24	; 24
  ba:	88 b3       	in	r24, 0x18	; 24
  bc:	8d 7f       	andi	r24, 0xFD	; 253
  be:	88 bb       	out	0x18, r24	; 24
  c0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
  c4:	8f ef       	ldi	r24, 0xFF	; 255
  c6:	8a bb       	out	0x1a, r24	; 26
  c8:	88 b3       	in	r24, 0x18	; 24
  ca:	8b 7f       	andi	r24, 0xFB	; 251
  cc:	88 bb       	out	0x18, r24	; 24
  ce:	08 95       	ret

000000d0 <LCD_WRITE_COMMAND>:
  d0:	cf 93       	push	r28
  d2:	c8 2f       	mov	r28, r24
  d4:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_isbusy>
  d8:	cb bb       	out	0x1b, r28	; 27
  da:	88 b3       	in	r24, 0x18	; 24
  dc:	89 7f       	andi	r24, 0xF9	; 249
  de:	88 bb       	out	0x18, r24	; 24
  e0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <LCD_clear_screen>:
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
  ee:	08 95       	ret

000000f0 <LCD_INIT>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	87 e8       	ldi	r24, 0x87	; 135
  f2:	93 e1       	ldi	r25, 0x13	; 19
  f4:	01 97       	sbiw	r24, 0x01	; 1
  f6:	f1 f7       	brne	.-4      	; 0xf4 <LCD_INIT+0x4>
  f8:	00 c0       	rjmp	.+0      	; 0xfa <LCD_INIT+0xa>
  fa:	00 00       	nop
	LCD_CTRL &= ~(1<<RW_SWITCH);
}
void LCD_INIT()
{
	_delay_ms(20);
	LCD_isbusy();
  fc:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_isbusy>
	DataDir_LCD_CTRL |= (1<<EN_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH);
 100:	87 b3       	in	r24, 0x17	; 23
 102:	8e 60       	ori	r24, 0x0E	; 14
 104:	87 bb       	out	0x17, r24	; 23
	LCD_CTRL &= ~((1<<EN_SWITCH) | (1<<RW_SWITCH) | (1<<RS_SWITCH));
 106:	88 b3       	in	r24, 0x18	; 24
 108:	81 7f       	andi	r24, 0xF1	; 241
 10a:	88 bb       	out	0x18, r24	; 24
	DataDir_LCD_PORT = 0xFF;
 10c:	8f ef       	ldi	r24, 0xFF	; 255
 10e:	8a bb       	out	0x1a, r24	; 26
	LCD_clear_screen();
 110:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_clear_screen>
	#ifdef EIGHT_BIT_MODE
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 114:	88 e3       	ldi	r24, 0x38	; 56
 116:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
	#endif
	#ifdef FOUR_BIT_MODE
	LCD_WRITE_COMMAND(0x02);
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
	#endif
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 11a:	86 e0       	ldi	r24, 0x06	; 6
 11c:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 120:	80 e8       	ldi	r24, 0x80	; 128
 122:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 126:	8f e0       	ldi	r24, 0x0F	; 15
 128:	0e 94 68 00 	call	0xd0	; 0xd0 <LCD_WRITE_COMMAND>
 12c:	08 95       	ret

0000012e <LCD_WRITE_CHAR>:
	LCD_KICK();
	#endif
}

void LCD_WRITE_CHAR(unsigned char data)
{
 12e:	cf 93       	push	r28
 130:	c8 2f       	mov	r28, r24
	LCD_isbusy();
 132:	0e 94 59 00 	call	0xb2	; 0xb2 <LCD_isbusy>
	#ifdef EIGHT_BIT_MODE
	LCD_PORT = data;
 136:	cb bb       	out	0x1b, r28	; 27
	LCD_CTRL &= ~(1<<RW_SWITCH);
 138:	88 b3       	in	r24, 0x18	; 24
 13a:	8b 7f       	andi	r24, 0xFB	; 251
 13c:	88 bb       	out	0x18, r24	; 24
	LCD_CTRL |= (1<<RS_SWITCH);
 13e:	88 b3       	in	r24, 0x18	; 24
 140:	82 60       	ori	r24, 0x02	; 2
 142:	88 bb       	out	0x18, r24	; 24
	LCD_KICK();
 144:	0e 94 49 00 	call	0x92	; 0x92 <LCD_KICK>
	LCD_CTRL &= ~(1<<RW_SWITCH);
	LCD_CTRL |= (1<<RS_SWITCH);
	_delay_ms(1);
	LCD_KICK();
	#endif
} 
 148:	cf 91       	pop	r28
 14a:	08 95       	ret

0000014c <__vector_13>:
#include "HAL/LCD.h"
#include "MCAL/USART.h"
#include "stdio.h"
#include <avr/interrupt.h>
ISR(USART_RXC_vect)
{
 14c:	1f 92       	push	r1
 14e:	0f 92       	push	r0
 150:	0f b6       	in	r0, 0x3f	; 63
 152:	0f 92       	push	r0
 154:	11 24       	eor	r1, r1
 156:	2f 93       	push	r18
 158:	3f 93       	push	r19
 15a:	4f 93       	push	r20
 15c:	5f 93       	push	r21
 15e:	6f 93       	push	r22
 160:	7f 93       	push	r23
 162:	8f 93       	push	r24
 164:	9f 93       	push	r25
 166:	af 93       	push	r26
 168:	bf 93       	push	r27
 16a:	ef 93       	push	r30
 16c:	ff 93       	push	r31
	LCD_WRITE_CHAR(UDR);
 16e:	8c b1       	in	r24, 0x0c	; 12
 170:	0e 94 97 00 	call	0x12e	; 0x12e <LCD_WRITE_CHAR>
}
 174:	ff 91       	pop	r31
 176:	ef 91       	pop	r30
 178:	bf 91       	pop	r27
 17a:	af 91       	pop	r26
 17c:	9f 91       	pop	r25
 17e:	8f 91       	pop	r24
 180:	7f 91       	pop	r23
 182:	6f 91       	pop	r22
 184:	5f 91       	pop	r21
 186:	4f 91       	pop	r20
 188:	3f 91       	pop	r19
 18a:	2f 91       	pop	r18
 18c:	0f 90       	pop	r0
 18e:	0f be       	out	0x3f, r0	; 63
 190:	0f 90       	pop	r0
 192:	1f 90       	pop	r1
 194:	18 95       	reti

00000196 <main>:
int main(void)
{
	uint32_t num;
	LCD_INIT();
 196:	0e 94 78 00 	call	0xf0	; 0xf0 <LCD_INIT>
	UART_Init();
 19a:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <UART_Init>
	char chr;
	/*UART_SendString_Asynch("Kerolos");
	_delay_ms(1000);
	UART_SendString_Asynch("dddddd");
	/* Replace with your application code */
	sei();
 19e:	78 94       	sei
	SetBit(UCSRB,RXCIE);
 1a0:	8a b1       	in	r24, 0x0a	; 10
 1a2:	80 68       	ori	r24, 0x80	; 128
 1a4:	8a b9       	out	0x0a, r24	; 10
 1a6:	ff cf       	rjmp	.-2      	; 0x1a6 <main+0x10>

000001a8 <UART_Init>:
	SetBit(UCSRB,TXCIE);
}

UART_TX_InterruptDisable(void)
{
	CLEARBIT(UCSRB,TXCIE);
 1a8:	83 e3       	ldi	r24, 0x33	; 51
 1aa:	89 b9       	out	0x09, r24	; 9
 1ac:	8b b1       	in	r24, 0x0b	; 11
 1ae:	8d 7f       	andi	r24, 0xFD	; 253
 1b0:	8b b9       	out	0x0b, r24	; 11
 1b2:	8a b1       	in	r24, 0x0a	; 10
 1b4:	80 61       	ori	r24, 0x10	; 16
 1b6:	8a b9       	out	0x0a, r24	; 10
 1b8:	8a b1       	in	r24, 0x0a	; 10
 1ba:	88 60       	ori	r24, 0x08	; 8
 1bc:	8a b9       	out	0x0a, r24	; 10
 1be:	08 95       	ret

000001c0 <UART_SendNoBlock>:
	}
}

void UART_SendNoBlock(uint8_t data)
{
	UDR = data;
 1c0:	8c b9       	out	0x0c, r24	; 12
 1c2:	08 95       	ret

000001c4 <__vector_15>:
static uint8_t* TX_Str ;
static uint8_t* RX_Str ;
static uint8_t flag_send = 1;
static uint8_t flag_receive = 1;
ISR(USART_TXC_vect)
{
 1c4:	1f 92       	push	r1
 1c6:	0f 92       	push	r0
 1c8:	0f b6       	in	r0, 0x3f	; 63
 1ca:	0f 92       	push	r0
 1cc:	11 24       	eor	r1, r1
 1ce:	2f 93       	push	r18
 1d0:	3f 93       	push	r19
 1d2:	4f 93       	push	r20
 1d4:	5f 93       	push	r21
 1d6:	6f 93       	push	r22
 1d8:	7f 93       	push	r23
 1da:	8f 93       	push	r24
 1dc:	9f 93       	push	r25
 1de:	af 93       	push	r26
 1e0:	bf 93       	push	r27
 1e2:	ef 93       	push	r30
 1e4:	ff 93       	push	r31
	static uint8_t i = 1;
	if(TX_Str[i] != 0)
 1e6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1ea:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <__data_end>
 1ee:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <__data_end+0x1>
 1f2:	e8 0f       	add	r30, r24
 1f4:	f1 1d       	adc	r31, r1
 1f6:	80 81       	ld	r24, Z
 1f8:	88 23       	and	r24, r24
 1fa:	41 f0       	breq	.+16     	; 0x20c <__vector_15+0x48>
	{
		UART_SendNoBlock(TX_Str[i]);
 1fc:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <UART_SendNoBlock>
		i++;
 200:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 204:	8f 5f       	subi	r24, 0xFF	; 255
 206:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 20a:	05 c0       	rjmp	.+10     	; 0x216 <__vector_15+0x52>
	}
	else
	{
		i = 1;
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
		flag_send = 1;
 212:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <flag_send>
		
	}
}
 216:	ff 91       	pop	r31
 218:	ef 91       	pop	r30
 21a:	bf 91       	pop	r27
 21c:	af 91       	pop	r26
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	7f 91       	pop	r23
 224:	6f 91       	pop	r22
 226:	5f 91       	pop	r21
 228:	4f 91       	pop	r20
 22a:	3f 91       	pop	r19
 22c:	2f 91       	pop	r18
 22e:	0f 90       	pop	r0
 230:	0f be       	out	0x3f, r0	; 63
 232:	0f 90       	pop	r0
 234:	1f 90       	pop	r1
 236:	18 95       	reti

00000238 <_exit>:
 238:	f8 94       	cli

0000023a <__stop_program>:
 23a:	ff cf       	rjmp	.-2      	; 0x23a <__stop_program>
