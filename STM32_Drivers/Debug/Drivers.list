
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b74  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08000ca4  08000ca4  00010ca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cdc  08000cdc  00020020  2**0
                  CONTENTS
  4 .ARM          00000000  08000cdc  08000cdc  00020020  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cdc  08000cdc  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cdc  08000cdc  00010cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ce0  08000ce0  00010ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08000ce4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000060  20000020  08000d04  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08000d04  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003efc  00000000  00000000  00020049  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000a0e  00000000  00000000  00023f45  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a90  00000000  00000000  00024953  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  000253e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  000255b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  0000245b  00000000  00000000  00025730  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000020c3  00000000  00000000  00027b8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00009594  00000000  00000000  00029c4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  000331e2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000059c  00000000  00000000  00033260  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000020 	.word	0x20000020
 800014c:	00000000 	.word	0x00000000
 8000150:	08000c8c 	.word	0x08000c8c

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000024 	.word	0x20000024
 800016c:	08000c8c 	.word	0x08000c8c

08000170 <Keypad_init>:
	for (i = 0; i < time; i++)
		for (j = 0; j < 255; j++)
			;
}

void Keypad_init() {
 8000170:	b580      	push	{r7, lr}
 8000172:	b082      	sub	sp, #8
 8000174:	af00      	add	r7, sp, #0
//	DataDir_KEYPAD_PORT &= ~((1 << R0) | (1 << R1) | (1 << R2) | (1 << R3));
//	DataDir_KEYPAD_PORT |= ((1 << C0) | (1 << C1) | (1 << C2) | (1 << C3));
//	KEYPAD_PORT = 0xFF;
	GPIO_PinConfig_t PinCfg;

	PinCfg.GPIO_PinNumber = R0;
 8000176:	2301      	movs	r3, #1
 8000178:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800017a:	2304      	movs	r3, #4
 800017c:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 800017e:	2301      	movs	r3, #1
 8000180:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000182:	1d3b      	adds	r3, r7, #4
 8000184:	4619      	mov	r1, r3
 8000186:	482c      	ldr	r0, [pc, #176]	; (8000238 <Keypad_init+0xc8>)
 8000188:	f000 fb79 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R1;
 800018c:	2302      	movs	r3, #2
 800018e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000190:	2304      	movs	r3, #4
 8000192:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000194:	2301      	movs	r3, #1
 8000196:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000198:	1d3b      	adds	r3, r7, #4
 800019a:	4619      	mov	r1, r3
 800019c:	4826      	ldr	r0, [pc, #152]	; (8000238 <Keypad_init+0xc8>)
 800019e:	f000 fb6e 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R2;
 80001a2:	2308      	movs	r3, #8
 80001a4:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001a6:	2304      	movs	r3, #4
 80001a8:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80001aa:	2301      	movs	r3, #1
 80001ac:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001ae:	1d3b      	adds	r3, r7, #4
 80001b0:	4619      	mov	r1, r3
 80001b2:	4821      	ldr	r0, [pc, #132]	; (8000238 <Keypad_init+0xc8>)
 80001b4:	f000 fb63 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = R3;
 80001b8:	2310      	movs	r3, #16
 80001ba:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001bc:	2304      	movs	r3, #4
 80001be:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80001c0:	2301      	movs	r3, #1
 80001c2:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001c4:	1d3b      	adds	r3, r7, #4
 80001c6:	4619      	mov	r1, r3
 80001c8:	481b      	ldr	r0, [pc, #108]	; (8000238 <Keypad_init+0xc8>)
 80001ca:	f000 fb58 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C0;
 80001ce:	2320      	movs	r3, #32
 80001d0:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001d2:	2304      	movs	r3, #4
 80001d4:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80001d6:	2301      	movs	r3, #1
 80001d8:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001da:	1d3b      	adds	r3, r7, #4
 80001dc:	4619      	mov	r1, r3
 80001de:	4816      	ldr	r0, [pc, #88]	; (8000238 <Keypad_init+0xc8>)
 80001e0:	f000 fb4d 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C1;
 80001e4:	2340      	movs	r3, #64	; 0x40
 80001e6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001e8:	2304      	movs	r3, #4
 80001ea:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80001ec:	2301      	movs	r3, #1
 80001ee:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 80001f0:	1d3b      	adds	r3, r7, #4
 80001f2:	4619      	mov	r1, r3
 80001f4:	4810      	ldr	r0, [pc, #64]	; (8000238 <Keypad_init+0xc8>)
 80001f6:	f000 fb42 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C2;
 80001fa:	2380      	movs	r3, #128	; 0x80
 80001fc:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80001fe:	2304      	movs	r3, #4
 8000200:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000202:	2301      	movs	r3, #1
 8000204:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 8000206:	1d3b      	adds	r3, r7, #4
 8000208:	4619      	mov	r1, r3
 800020a:	480b      	ldr	r0, [pc, #44]	; (8000238 <Keypad_init+0xc8>)
 800020c:	f000 fb37 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = C3;
 8000210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000214:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000216:	2304      	movs	r3, #4
 8000218:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 800021a:	2301      	movs	r3, #1
 800021c:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(KEYPAD_PORT, &PinCfg);
 800021e:	1d3b      	adds	r3, r7, #4
 8000220:	4619      	mov	r1, r3
 8000222:	4805      	ldr	r0, [pc, #20]	; (8000238 <Keypad_init+0xc8>)
 8000224:	f000 fb2b 	bl	800087e <MCAL_GPIO_Init>
	MCAL_GPIO_WritePort(KEYPAD_PORT, 0xFF);
 8000228:	21ff      	movs	r1, #255	; 0xff
 800022a:	4803      	ldr	r0, [pc, #12]	; (8000238 <Keypad_init+0xc8>)
 800022c:	f000 fbd8 	bl	80009e0 <MCAL_GPIO_WritePort>

}
 8000230:	bf00      	nop
 8000232:	3708      	adds	r7, #8
 8000234:	46bd      	mov	sp, r7
 8000236:	bd80      	pop	{r7, pc}
 8000238:	40010c00 	.word	0x40010c00

0800023c <Keypad_getkey>:

char Keypad_getkey() {
 800023c:	b580      	push	{r7, lr}
 800023e:	b082      	sub	sp, #8
 8000240:	af00      	add	r7, sp, #0
	int i, j;
	for (i = 0; i < 4; i++) {
 8000242:	2300      	movs	r3, #0
 8000244:	607b      	str	r3, [r7, #4]
 8000246:	e0b4      	b.n	80003b2 <Keypad_getkey+0x176>
//		KEYPAD_PORT |= ((1 << Key_padCol[0]) | (1 << Key_padCol[1])
//				| (1 << Key_padCol[2]) | (1 << Key_padCol[3]));
//		KEYPAD_PORT &= ~(1 << Key_padCol[i]);
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[0], GPIO_PIN_SET);
 8000248:	4b5e      	ldr	r3, [pc, #376]	; (80003c4 <Keypad_getkey+0x188>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	b29b      	uxth	r3, r3
 800024e:	2201      	movs	r2, #1
 8000250:	4619      	mov	r1, r3
 8000252:	485d      	ldr	r0, [pc, #372]	; (80003c8 <Keypad_getkey+0x18c>)
 8000254:	f000 fbad 	bl	80009b2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[1], GPIO_PIN_SET);
 8000258:	4b5a      	ldr	r3, [pc, #360]	; (80003c4 <Keypad_getkey+0x188>)
 800025a:	685b      	ldr	r3, [r3, #4]
 800025c:	b29b      	uxth	r3, r3
 800025e:	2201      	movs	r2, #1
 8000260:	4619      	mov	r1, r3
 8000262:	4859      	ldr	r0, [pc, #356]	; (80003c8 <Keypad_getkey+0x18c>)
 8000264:	f000 fba5 	bl	80009b2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[2], GPIO_PIN_SET);
 8000268:	4b56      	ldr	r3, [pc, #344]	; (80003c4 <Keypad_getkey+0x188>)
 800026a:	689b      	ldr	r3, [r3, #8]
 800026c:	b29b      	uxth	r3, r3
 800026e:	2201      	movs	r2, #1
 8000270:	4619      	mov	r1, r3
 8000272:	4855      	ldr	r0, [pc, #340]	; (80003c8 <Keypad_getkey+0x18c>)
 8000274:	f000 fb9d 	bl	80009b2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[3], GPIO_PIN_SET);
 8000278:	4b52      	ldr	r3, [pc, #328]	; (80003c4 <Keypad_getkey+0x188>)
 800027a:	68db      	ldr	r3, [r3, #12]
 800027c:	b29b      	uxth	r3, r3
 800027e:	2201      	movs	r2, #1
 8000280:	4619      	mov	r1, r3
 8000282:	4851      	ldr	r0, [pc, #324]	; (80003c8 <Keypad_getkey+0x18c>)
 8000284:	f000 fb95 	bl	80009b2 <MCAL_GPIO_WritePin>
		MCAL_GPIO_WritePin(KEYPAD_PORT, Key_padCol[i], GPIO_PIN_RESET);
 8000288:	4a4e      	ldr	r2, [pc, #312]	; (80003c4 <Keypad_getkey+0x188>)
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000290:	b29b      	uxth	r3, r3
 8000292:	2200      	movs	r2, #0
 8000294:	4619      	mov	r1, r3
 8000296:	484c      	ldr	r0, [pc, #304]	; (80003c8 <Keypad_getkey+0x18c>)
 8000298:	f000 fb8b 	bl	80009b2 <MCAL_GPIO_WritePin>
		for (j = 0; j < 4; j++) {
 800029c:	2300      	movs	r3, #0
 800029e:	603b      	str	r3, [r7, #0]
 80002a0:	e080      	b.n	80003a4 <Keypad_getkey+0x168>
			if (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0) {
 80002a2:	4a4a      	ldr	r2, [pc, #296]	; (80003cc <Keypad_getkey+0x190>)
 80002a4:	683b      	ldr	r3, [r7, #0]
 80002a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002aa:	b29b      	uxth	r3, r3
 80002ac:	4619      	mov	r1, r3
 80002ae:	4846      	ldr	r0, [pc, #280]	; (80003c8 <Keypad_getkey+0x18c>)
 80002b0:	f000 fb68 	bl	8000984 <MCAL_GPIO_ReadPin>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d171      	bne.n	800039e <Keypad_getkey+0x162>
				while (MCAL_GPIO_ReadPin(KEYPAD_PORT, Key_padRow[j]) == 0)
 80002ba:	bf00      	nop
 80002bc:	4a43      	ldr	r2, [pc, #268]	; (80003cc <Keypad_getkey+0x190>)
 80002be:	683b      	ldr	r3, [r7, #0]
 80002c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002c4:	b29b      	uxth	r3, r3
 80002c6:	4619      	mov	r1, r3
 80002c8:	483f      	ldr	r0, [pc, #252]	; (80003c8 <Keypad_getkey+0x18c>)
 80002ca:	f000 fb5b 	bl	8000984 <MCAL_GPIO_ReadPin>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d0f3      	beq.n	80002bc <Keypad_getkey+0x80>
					;
				switch (i) {
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b03      	cmp	r3, #3
 80002d8:	d861      	bhi.n	800039e <Keypad_getkey+0x162>
 80002da:	a201      	add	r2, pc, #4	; (adr r2, 80002e0 <Keypad_getkey+0xa4>)
 80002dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002e0:	080002f1 	.word	0x080002f1
 80002e4:	08000319 	.word	0x08000319
 80002e8:	08000341 	.word	0x08000341
 80002ec:	08000369 	.word	0x08000369
				case (0):
					if (j == 0)
 80002f0:	683b      	ldr	r3, [r7, #0]
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d101      	bne.n	80002fa <Keypad_getkey+0xbe>
						return '7';
 80002f6:	2337      	movs	r3, #55	; 0x37
 80002f8:	e060      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	2b01      	cmp	r3, #1
 80002fe:	d101      	bne.n	8000304 <Keypad_getkey+0xc8>
						return '4';
 8000300:	2334      	movs	r3, #52	; 0x34
 8000302:	e05b      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 8000304:	683b      	ldr	r3, [r7, #0]
 8000306:	2b02      	cmp	r3, #2
 8000308:	d101      	bne.n	800030e <Keypad_getkey+0xd2>
						return '1';
 800030a:	2331      	movs	r3, #49	; 0x31
 800030c:	e056      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 800030e:	683b      	ldr	r3, [r7, #0]
 8000310:	2b03      	cmp	r3, #3
 8000312:	d13d      	bne.n	8000390 <Keypad_getkey+0x154>
						return '?';
 8000314:	233f      	movs	r3, #63	; 0x3f
 8000316:	e051      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (1):
					if (j == 0)
 8000318:	683b      	ldr	r3, [r7, #0]
 800031a:	2b00      	cmp	r3, #0
 800031c:	d101      	bne.n	8000322 <Keypad_getkey+0xe6>
						return '8';
 800031e:	2338      	movs	r3, #56	; 0x38
 8000320:	e04c      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 8000322:	683b      	ldr	r3, [r7, #0]
 8000324:	2b01      	cmp	r3, #1
 8000326:	d101      	bne.n	800032c <Keypad_getkey+0xf0>
						return '5';
 8000328:	2335      	movs	r3, #53	; 0x35
 800032a:	e047      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	2b02      	cmp	r3, #2
 8000330:	d101      	bne.n	8000336 <Keypad_getkey+0xfa>
						return '2';
 8000332:	2332      	movs	r3, #50	; 0x32
 8000334:	e042      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	2b03      	cmp	r3, #3
 800033a:	d12b      	bne.n	8000394 <Keypad_getkey+0x158>
						return '0';
 800033c:	2330      	movs	r3, #48	; 0x30
 800033e:	e03d      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (2):
					if (j == 0)
 8000340:	683b      	ldr	r3, [r7, #0]
 8000342:	2b00      	cmp	r3, #0
 8000344:	d101      	bne.n	800034a <Keypad_getkey+0x10e>
						return '9';
 8000346:	2339      	movs	r3, #57	; 0x39
 8000348:	e038      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 800034a:	683b      	ldr	r3, [r7, #0]
 800034c:	2b01      	cmp	r3, #1
 800034e:	d101      	bne.n	8000354 <Keypad_getkey+0x118>
						return '6';
 8000350:	2336      	movs	r3, #54	; 0x36
 8000352:	e033      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 8000354:	683b      	ldr	r3, [r7, #0]
 8000356:	2b02      	cmp	r3, #2
 8000358:	d101      	bne.n	800035e <Keypad_getkey+0x122>
						return '3';
 800035a:	2333      	movs	r3, #51	; 0x33
 800035c:	e02e      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 800035e:	683b      	ldr	r3, [r7, #0]
 8000360:	2b03      	cmp	r3, #3
 8000362:	d119      	bne.n	8000398 <Keypad_getkey+0x15c>
						return '=';
 8000364:	233d      	movs	r3, #61	; 0x3d
 8000366:	e029      	b.n	80003bc <Keypad_getkey+0x180>
					break;
				case (3):
					if (j == 0)
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	2b00      	cmp	r3, #0
 800036c:	d101      	bne.n	8000372 <Keypad_getkey+0x136>
						return '/';
 800036e:	232f      	movs	r3, #47	; 0x2f
 8000370:	e024      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 1)
 8000372:	683b      	ldr	r3, [r7, #0]
 8000374:	2b01      	cmp	r3, #1
 8000376:	d101      	bne.n	800037c <Keypad_getkey+0x140>
						return '*';
 8000378:	232a      	movs	r3, #42	; 0x2a
 800037a:	e01f      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 2)
 800037c:	683b      	ldr	r3, [r7, #0]
 800037e:	2b02      	cmp	r3, #2
 8000380:	d101      	bne.n	8000386 <Keypad_getkey+0x14a>
						return '-';
 8000382:	232d      	movs	r3, #45	; 0x2d
 8000384:	e01a      	b.n	80003bc <Keypad_getkey+0x180>
					else if (j == 3)
 8000386:	683b      	ldr	r3, [r7, #0]
 8000388:	2b03      	cmp	r3, #3
 800038a:	d107      	bne.n	800039c <Keypad_getkey+0x160>
						return '+';
 800038c:	232b      	movs	r3, #43	; 0x2b
 800038e:	e015      	b.n	80003bc <Keypad_getkey+0x180>
					break;
 8000390:	bf00      	nop
 8000392:	e004      	b.n	800039e <Keypad_getkey+0x162>
					break;
 8000394:	bf00      	nop
 8000396:	e002      	b.n	800039e <Keypad_getkey+0x162>
					break;
 8000398:	bf00      	nop
 800039a:	e000      	b.n	800039e <Keypad_getkey+0x162>
					break;
 800039c:	bf00      	nop
		for (j = 0; j < 4; j++) {
 800039e:	683b      	ldr	r3, [r7, #0]
 80003a0:	3301      	adds	r3, #1
 80003a2:	603b      	str	r3, [r7, #0]
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	2b03      	cmp	r3, #3
 80003a8:	f77f af7b 	ble.w	80002a2 <Keypad_getkey+0x66>
	for (i = 0; i < 4; i++) {
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	3301      	adds	r3, #1
 80003b0:	607b      	str	r3, [r7, #4]
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	2b03      	cmp	r3, #3
 80003b6:	f77f af47 	ble.w	8000248 <Keypad_getkey+0xc>
				}
			}
		}
	}
	return 'A';
 80003ba:	2341      	movs	r3, #65	; 0x41
}
 80003bc:	4618      	mov	r0, r3
 80003be:	3708      	adds	r7, #8
 80003c0:	46bd      	mov	sp, r7
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	20000010 	.word	0x20000010
 80003c8:	40010c00 	.word	0x40010c00
 80003cc:	20000000 	.word	0x20000000

080003d0 <my_wait>:
 */
#include "LCD.h"
#include "STM32F103C6_GPIO_Driver.h"
GPIO_PinConfig_t PinCfg ;
void my_wait(int x)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	uint32_t y,z;
	for(y=0;y<x;y++)
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
 80003dc:	e00b      	b.n	80003f6 <my_wait+0x26>
		for(z=0;z<255;z++);
 80003de:	2300      	movs	r3, #0
 80003e0:	60bb      	str	r3, [r7, #8]
 80003e2:	e002      	b.n	80003ea <my_wait+0x1a>
 80003e4:	68bb      	ldr	r3, [r7, #8]
 80003e6:	3301      	adds	r3, #1
 80003e8:	60bb      	str	r3, [r7, #8]
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2bfe      	cmp	r3, #254	; 0xfe
 80003ee:	d9f9      	bls.n	80003e4 <my_wait+0x14>
	for(y=0;y<x;y++)
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	68fa      	ldr	r2, [r7, #12]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d3ef      	bcc.n	80003de <my_wait+0xe>
}
 80003fe:	bf00      	nop
 8000400:	3714      	adds	r7, #20
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr

08000408 <LCD_clear_screen>:
void LCD_clear_screen()
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
	LCD_WRITE_COMMAND(LCD_CLEAR_SCREEN);
 800040c:	2001      	movs	r0, #1
 800040e:	f000 f909 	bl	8000624 <LCD_WRITE_COMMAND>
}
 8000412:	bf00      	nop
 8000414:	bd80      	pop	{r7, pc}
	...

08000418 <LCD_KICK>:
void LCD_KICK()
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
	//LCD_CTRL &= ~(1<<EN_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_SET);
 800041c:	2201      	movs	r2, #1
 800041e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000422:	4807      	ldr	r0, [pc, #28]	; (8000440 <LCD_KICK+0x28>)
 8000424:	f000 fac5 	bl	80009b2 <MCAL_GPIO_WritePin>
	my_wait(50);
 8000428:	2032      	movs	r0, #50	; 0x32
 800042a:	f7ff ffd1 	bl	80003d0 <my_wait>
	//LCD_CTRL |= (1<<EN_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL, EN_SWITCH, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000434:	4802      	ldr	r0, [pc, #8]	; (8000440 <LCD_KICK+0x28>)
 8000436:	f000 fabc 	bl	80009b2 <MCAL_GPIO_WritePin>
}
 800043a:	bf00      	nop
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	40010800 	.word	0x40010800

08000444 <LCD_GOTO_XY>:
void LCD_GOTO_XY(unsigned char line, unsigned char position) {
 8000444:	b580      	push	{r7, lr}
 8000446:	b082      	sub	sp, #8
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	460a      	mov	r2, r1
 800044e:	71fb      	strb	r3, [r7, #7]
 8000450:	4613      	mov	r3, r2
 8000452:	71bb      	strb	r3, [r7, #6]
	if (line == 1) {
 8000454:	79fb      	ldrb	r3, [r7, #7]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d108      	bne.n	800046c <LCD_GOTO_XY+0x28>
		if (position < 16 && position >= 0) {
 800045a:	79bb      	ldrb	r3, [r7, #6]
 800045c:	2b0f      	cmp	r3, #15
 800045e:	d805      	bhi.n	800046c <LCD_GOTO_XY+0x28>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW + position);
 8000460:	79bb      	ldrb	r3, [r7, #6]
 8000462:	3b80      	subs	r3, #128	; 0x80
 8000464:	b2db      	uxtb	r3, r3
 8000466:	4618      	mov	r0, r3
 8000468:	f000 f8dc 	bl	8000624 <LCD_WRITE_COMMAND>
		}
	}
	if (line == 2) {
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2b02      	cmp	r3, #2
 8000470:	d108      	bne.n	8000484 <LCD_GOTO_XY+0x40>
		if (position < 16 && position >= 0) {
 8000472:	79bb      	ldrb	r3, [r7, #6]
 8000474:	2b0f      	cmp	r3, #15
 8000476:	d805      	bhi.n	8000484 <LCD_GOTO_XY+0x40>
			LCD_WRITE_COMMAND(LCD_BEGIN_AT_SECOND_ROW + position);
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	3b40      	subs	r3, #64	; 0x40
 800047c:	b2db      	uxtb	r3, r3
 800047e:	4618      	mov	r0, r3
 8000480:	f000 f8d0 	bl	8000624 <LCD_WRITE_COMMAND>
		}
	}
}
 8000484:	bf00      	nop
 8000486:	3708      	adds	r7, #8
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}

0800048c <LCD_INIT>:
	LCD_KICK();
	//DataDir_LCD_PORT = 0xFF;
	//LCD_CTRL &= ~(1<<RW_SWITCH);
	MCAL_GPIO_WritePin(LCD_CTRL,RW_SWITCH,GPIO_PIN_RESET);
}
void LCD_INIT() {
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0

	my_wait(20);
 8000490:	2014      	movs	r0, #20
 8000492:	f7ff ff9d 	bl	80003d0 <my_wait>
	// SET THE FIRST 3 PINS AS OUPUT
	LCD_GPIO_init();
 8000496:	f000 f813 	bl	80004c0 <LCD_GPIO_init>
//	LCD_CTRL &= ~(1 << EN_SWITCH | 1 << RS_SWITCH | 1 << RW_SWITCH);
//	DataDir_LCD_PORT = 0xFF;
	my_wait(15);
 800049a:	200f      	movs	r0, #15
 800049c:	f7ff ff98 	bl	80003d0 <my_wait>

	LCD_clear_screen();
 80004a0:	f7ff ffb2 	bl	8000408 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_8BIT_2LINES);
 80004a4:	2038      	movs	r0, #56	; 0x38
 80004a6:	f000 f8bd 	bl	8000624 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
 80004aa:	2006      	movs	r0, #6
 80004ac:	f000 f8ba 	bl	8000624 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
 80004b0:	2080      	movs	r0, #128	; 0x80
 80004b2:	f000 f8b7 	bl	8000624 <LCD_WRITE_COMMAND>
	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
 80004b6:	200f      	movs	r0, #15
 80004b8:	f000 f8b4 	bl	8000624 <LCD_WRITE_COMMAND>
}
 80004bc:	bf00      	nop
 80004be:	bd80      	pop	{r7, pc}

080004c0 <LCD_GPIO_init>:

void LCD_GPIO_init()
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	my_wait(20);
 80004c4:	2014      	movs	r0, #20
 80004c6:	f7ff ff83 	bl	80003d0 <my_wait>
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 80004ca:	4b54      	ldr	r3, [pc, #336]	; (800061c <LCD_GPIO_init+0x15c>)
 80004cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80004d0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004d2:	4b52      	ldr	r3, [pc, #328]	; (800061c <LCD_GPIO_init+0x15c>)
 80004d4:	2204      	movs	r2, #4
 80004d6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80004d8:	4b50      	ldr	r3, [pc, #320]	; (800061c <LCD_GPIO_init+0x15c>)
 80004da:	2201      	movs	r2, #1
 80004dc:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80004de:	494f      	ldr	r1, [pc, #316]	; (800061c <LCD_GPIO_init+0x15c>)
 80004e0:	484f      	ldr	r0, [pc, #316]	; (8000620 <LCD_GPIO_init+0x160>)
 80004e2:	f000 f9cc 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = RW_SWITCH;
 80004e6:	4b4d      	ldr	r3, [pc, #308]	; (800061c <LCD_GPIO_init+0x15c>)
 80004e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80004ec:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80004ee:	4b4b      	ldr	r3, [pc, #300]	; (800061c <LCD_GPIO_init+0x15c>)
 80004f0:	2204      	movs	r2, #4
 80004f2:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80004f4:	4b49      	ldr	r3, [pc, #292]	; (800061c <LCD_GPIO_init+0x15c>)
 80004f6:	2201      	movs	r2, #1
 80004f8:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 80004fa:	4948      	ldr	r1, [pc, #288]	; (800061c <LCD_GPIO_init+0x15c>)
 80004fc:	4848      	ldr	r0, [pc, #288]	; (8000620 <LCD_GPIO_init+0x160>)
 80004fe:	f000 f9be 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber = EN_SWITCH;
 8000502:	4b46      	ldr	r3, [pc, #280]	; (800061c <LCD_GPIO_init+0x15c>)
 8000504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000508:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800050a:	4b44      	ldr	r3, [pc, #272]	; (800061c <LCD_GPIO_init+0x15c>)
 800050c:	2204      	movs	r2, #4
 800050e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000510:	4b42      	ldr	r3, [pc, #264]	; (800061c <LCD_GPIO_init+0x15c>)
 8000512:	2201      	movs	r2, #1
 8000514:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_CTRL, &PinCfg);
 8000516:	4941      	ldr	r1, [pc, #260]	; (800061c <LCD_GPIO_init+0x15c>)
 8000518:	4841      	ldr	r0, [pc, #260]	; (8000620 <LCD_GPIO_init+0x160>)
 800051a:	f000 f9b0 	bl	800087e <MCAL_GPIO_Init>
	//=================================================
	PinCfg.GPIO_PinNumber= GPIO_PIN_0;
 800051e:	4b3f      	ldr	r3, [pc, #252]	; (800061c <LCD_GPIO_init+0x15c>)
 8000520:	2201      	movs	r2, #1
 8000522:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000524:	4b3d      	ldr	r3, [pc, #244]	; (800061c <LCD_GPIO_init+0x15c>)
 8000526:	2204      	movs	r2, #4
 8000528:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 800052a:	4b3c      	ldr	r3, [pc, #240]	; (800061c <LCD_GPIO_init+0x15c>)
 800052c:	2201      	movs	r2, #1
 800052e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000530:	493a      	ldr	r1, [pc, #232]	; (800061c <LCD_GPIO_init+0x15c>)
 8000532:	483b      	ldr	r0, [pc, #236]	; (8000620 <LCD_GPIO_init+0x160>)
 8000534:	f000 f9a3 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber= GPIO_PIN_1;
 8000538:	4b38      	ldr	r3, [pc, #224]	; (800061c <LCD_GPIO_init+0x15c>)
 800053a:	2202      	movs	r2, #2
 800053c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800053e:	4b37      	ldr	r3, [pc, #220]	; (800061c <LCD_GPIO_init+0x15c>)
 8000540:	2204      	movs	r2, #4
 8000542:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000544:	4b35      	ldr	r3, [pc, #212]	; (800061c <LCD_GPIO_init+0x15c>)
 8000546:	2201      	movs	r2, #1
 8000548:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800054a:	4934      	ldr	r1, [pc, #208]	; (800061c <LCD_GPIO_init+0x15c>)
 800054c:	4834      	ldr	r0, [pc, #208]	; (8000620 <LCD_GPIO_init+0x160>)
 800054e:	f000 f996 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber= GPIO_PIN_2;
 8000552:	4b32      	ldr	r3, [pc, #200]	; (800061c <LCD_GPIO_init+0x15c>)
 8000554:	2204      	movs	r2, #4
 8000556:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000558:	4b30      	ldr	r3, [pc, #192]	; (800061c <LCD_GPIO_init+0x15c>)
 800055a:	2204      	movs	r2, #4
 800055c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 800055e:	4b2f      	ldr	r3, [pc, #188]	; (800061c <LCD_GPIO_init+0x15c>)
 8000560:	2201      	movs	r2, #1
 8000562:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000564:	492d      	ldr	r1, [pc, #180]	; (800061c <LCD_GPIO_init+0x15c>)
 8000566:	482e      	ldr	r0, [pc, #184]	; (8000620 <LCD_GPIO_init+0x160>)
 8000568:	f000 f989 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber= GPIO_PIN_3;
 800056c:	4b2b      	ldr	r3, [pc, #172]	; (800061c <LCD_GPIO_init+0x15c>)
 800056e:	2208      	movs	r2, #8
 8000570:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <LCD_GPIO_init+0x15c>)
 8000574:	2204      	movs	r2, #4
 8000576:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000578:	4b28      	ldr	r3, [pc, #160]	; (800061c <LCD_GPIO_init+0x15c>)
 800057a:	2201      	movs	r2, #1
 800057c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 800057e:	4927      	ldr	r1, [pc, #156]	; (800061c <LCD_GPIO_init+0x15c>)
 8000580:	4827      	ldr	r0, [pc, #156]	; (8000620 <LCD_GPIO_init+0x160>)
 8000582:	f000 f97c 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber= GPIO_PIN_4;
 8000586:	4b25      	ldr	r3, [pc, #148]	; (800061c <LCD_GPIO_init+0x15c>)
 8000588:	2210      	movs	r2, #16
 800058a:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 800058c:	4b23      	ldr	r3, [pc, #140]	; (800061c <LCD_GPIO_init+0x15c>)
 800058e:	2204      	movs	r2, #4
 8000590:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000592:	4b22      	ldr	r3, [pc, #136]	; (800061c <LCD_GPIO_init+0x15c>)
 8000594:	2201      	movs	r2, #1
 8000596:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 8000598:	4920      	ldr	r1, [pc, #128]	; (800061c <LCD_GPIO_init+0x15c>)
 800059a:	4821      	ldr	r0, [pc, #132]	; (8000620 <LCD_GPIO_init+0x160>)
 800059c:	f000 f96f 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber= GPIO_PIN_5;
 80005a0:	4b1e      	ldr	r3, [pc, #120]	; (800061c <LCD_GPIO_init+0x15c>)
 80005a2:	2220      	movs	r2, #32
 80005a4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <LCD_GPIO_init+0x15c>)
 80005a8:	2204      	movs	r2, #4
 80005aa:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80005ac:	4b1b      	ldr	r3, [pc, #108]	; (800061c <LCD_GPIO_init+0x15c>)
 80005ae:	2201      	movs	r2, #1
 80005b0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80005b2:	491a      	ldr	r1, [pc, #104]	; (800061c <LCD_GPIO_init+0x15c>)
 80005b4:	481a      	ldr	r0, [pc, #104]	; (8000620 <LCD_GPIO_init+0x160>)
 80005b6:	f000 f962 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber= GPIO_PIN_6;
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <LCD_GPIO_init+0x15c>)
 80005bc:	2240      	movs	r2, #64	; 0x40
 80005be:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80005c0:	4b16      	ldr	r3, [pc, #88]	; (800061c <LCD_GPIO_init+0x15c>)
 80005c2:	2204      	movs	r2, #4
 80005c4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <LCD_GPIO_init+0x15c>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80005cc:	4913      	ldr	r1, [pc, #76]	; (800061c <LCD_GPIO_init+0x15c>)
 80005ce:	4814      	ldr	r0, [pc, #80]	; (8000620 <LCD_GPIO_init+0x160>)
 80005d0:	f000 f955 	bl	800087e <MCAL_GPIO_Init>

	PinCfg.GPIO_PinNumber= GPIO_PIN_7;
 80005d4:	4b11      	ldr	r3, [pc, #68]	; (800061c <LCD_GPIO_init+0x15c>)
 80005d6:	2280      	movs	r2, #128	; 0x80
 80005d8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_OUTPUT_PP;
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <LCD_GPIO_init+0x15c>)
 80005dc:	2204      	movs	r2, #4
 80005de:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 80005e0:	4b0e      	ldr	r3, [pc, #56]	; (800061c <LCD_GPIO_init+0x15c>)
 80005e2:	2201      	movs	r2, #1
 80005e4:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_PORT, &PinCfg);
 80005e6:	490d      	ldr	r1, [pc, #52]	; (800061c <LCD_GPIO_init+0x15c>)
 80005e8:	480d      	ldr	r0, [pc, #52]	; (8000620 <LCD_GPIO_init+0x160>)
 80005ea:	f000 f948 	bl	800087e <MCAL_GPIO_Init>

	MCAL_GPIO_WritePin(LCD_PORT, RS_SWITCH, GPIO_PIN_RESET);
 80005ee:	2200      	movs	r2, #0
 80005f0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005f4:	480a      	ldr	r0, [pc, #40]	; (8000620 <LCD_GPIO_init+0x160>)
 80005f6:	f000 f9dc 	bl	80009b2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, EN_SWITCH, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000600:	4807      	ldr	r0, [pc, #28]	; (8000620 <LCD_GPIO_init+0x160>)
 8000602:	f000 f9d6 	bl	80009b2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT, RW_SWITCH, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	f44f 7100 	mov.w	r1, #512	; 0x200
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <LCD_GPIO_init+0x160>)
 800060e:	f000 f9d0 	bl	80009b2 <MCAL_GPIO_WritePin>
	LCD_clear_screen();
 8000612:	f7ff fef9 	bl	8000408 <LCD_clear_screen>
	LCD_WRITE_COMMAND(LCD_FUNCTION_4BIT_2LINES);
#endif
//	LCD_WRITE_COMMAND(LCD_ENTRY_MODE);
//	LCD_WRITE_COMMAND(LCD_BEGIN_AT_FIRST_ROW);
//	LCD_WRITE_COMMAND(LCD_DISP_ON_CURSOR_BLINK);
}
 8000616:	bf00      	nop
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000003c 	.word	0x2000003c
 8000620:	40010800 	.word	0x40010800

08000624 <LCD_WRITE_COMMAND>:

void LCD_WRITE_COMMAND(unsigned char command)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	//LCD_isbusy();
#ifdef EIGHT_BIT_MODE
	//LCD_PORT = command;
	MCAL_GPIO_WritePort(LCD_PORT, command);
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	b29b      	uxth	r3, r3
 8000632:	4619      	mov	r1, r3
 8000634:	480b      	ldr	r0, [pc, #44]	; (8000664 <LCD_WRITE_COMMAND+0x40>)
 8000636:	f000 f9d3 	bl	80009e0 <MCAL_GPIO_WritePort>
	//LCD_CTRL &= ~((1<<RW_SWITCH) | (1<<RS_SWITCH));
	MCAL_GPIO_WritePin(LCD_PORT,RW_SWITCH,GPIO_PIN_RESET);
 800063a:	2200      	movs	r2, #0
 800063c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000640:	4808      	ldr	r0, [pc, #32]	; (8000664 <LCD_WRITE_COMMAND+0x40>)
 8000642:	f000 f9b6 	bl	80009b2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT,RS_SWITCH,GPIO_PIN_RESET);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 7180 	mov.w	r1, #256	; 0x100
 800064c:	4805      	ldr	r0, [pc, #20]	; (8000664 <LCD_WRITE_COMMAND+0x40>)
 800064e:	f000 f9b0 	bl	80009b2 <MCAL_GPIO_WritePin>
	my_wait(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f7ff febc 	bl	80003d0 <my_wait>
	LCD_KICK();
 8000658:	f7ff fede 	bl	8000418 <LCD_KICK>
	MCAL_GPIO_WritePin(GPIOA,RW_SWITCH,GPIO_PIN_RESET);
	MCAL_GPIO_WritePin(GPIOA,RS_SWITCH,GPIO_PIN_SET);
	my_wait(1);
	LCD_KICK();
#endif
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40010800 	.word	0x40010800

08000668 <LCD_WRITE_CHAR>:

void LCD_WRITE_CHAR(unsigned char data)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	71fb      	strb	r3, [r7, #7]
	//LCD_isbusy();
#ifdef EIGHT_BIT_MODE
	//LCD_PORT = data;
	MCAL_GPIO_WritePort(LCD_PORT, data);
 8000672:	79fb      	ldrb	r3, [r7, #7]
 8000674:	b29b      	uxth	r3, r3
 8000676:	4619      	mov	r1, r3
 8000678:	480b      	ldr	r0, [pc, #44]	; (80006a8 <LCD_WRITE_CHAR+0x40>)
 800067a:	f000 f9b1 	bl	80009e0 <MCAL_GPIO_WritePort>
	//LCD_CTRL &= ~(1<<RW_SWITCH);
	//LCD_CTRL |= (1<<RS_SWITCH);
	MCAL_GPIO_WritePin(LCD_PORT,RW_SWITCH,GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000684:	4808      	ldr	r0, [pc, #32]	; (80006a8 <LCD_WRITE_CHAR+0x40>)
 8000686:	f000 f994 	bl	80009b2 <MCAL_GPIO_WritePin>
	MCAL_GPIO_WritePin(LCD_PORT,RS_SWITCH,GPIO_PIN_SET);
 800068a:	2201      	movs	r2, #1
 800068c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000690:	4805      	ldr	r0, [pc, #20]	; (80006a8 <LCD_WRITE_CHAR+0x40>)
 8000692:	f000 f98e 	bl	80009b2 <MCAL_GPIO_WritePin>
	my_wait(1);
 8000696:	2001      	movs	r0, #1
 8000698:	f7ff fe9a 	bl	80003d0 <my_wait>
	LCD_KICK();
 800069c:	f7ff febc 	bl	8000418 <LCD_KICK>
	LCD_CTRL &= ~(1<<RW_SWITCH);
	LCD_CTRL |= (1<<RS_SWITCH);
	my_wait(1);
	LCD_KICK();
#endif
}
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}
 80006a8:	40010800 	.word	0x40010800

080006ac <LCD_WRITE_STRING>:
void LCD_WRITE_STRING(char* string)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	unsigned char count = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	73fb      	strb	r3, [r7, #15]
	while(*string != 0)
 80006b8:	e01c      	b.n	80006f4 <LCD_WRITE_STRING+0x48>
	{
		LCD_WRITE_CHAR(*(string++));
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	1c5a      	adds	r2, r3, #1
 80006be:	607a      	str	r2, [r7, #4]
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4618      	mov	r0, r3
 80006c4:	f7ff ffd0 	bl	8000668 <LCD_WRITE_CHAR>
		count++;
 80006c8:	7bfb      	ldrb	r3, [r7, #15]
 80006ca:	3301      	adds	r3, #1
 80006cc:	73fb      	strb	r3, [r7, #15]
		if(count == 16)
 80006ce:	7bfb      	ldrb	r3, [r7, #15]
 80006d0:	2b10      	cmp	r3, #16
 80006d2:	d104      	bne.n	80006de <LCD_WRITE_STRING+0x32>
		{
			LCD_GOTO_XY(2,0);
 80006d4:	2100      	movs	r1, #0
 80006d6:	2002      	movs	r0, #2
 80006d8:	f7ff feb4 	bl	8000444 <LCD_GOTO_XY>
 80006dc:	e00a      	b.n	80006f4 <LCD_WRITE_STRING+0x48>
		}
		else if (count == 32)
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	2b20      	cmp	r3, #32
 80006e2:	d107      	bne.n	80006f4 <LCD_WRITE_STRING+0x48>
		{
			LCD_clear_screen();
 80006e4:	f7ff fe90 	bl	8000408 <LCD_clear_screen>
			LCD_GOTO_XY(1,0);
 80006e8:	2100      	movs	r1, #0
 80006ea:	2001      	movs	r0, #1
 80006ec:	f7ff feaa 	bl	8000444 <LCD_GOTO_XY>
			count = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	73fb      	strb	r3, [r7, #15]
	while(*string != 0)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d1de      	bne.n	80006ba <LCD_WRITE_STRING+0xe>
		}
	}
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <EXTI0_IRQHandler>:
//=================================================================
//====================== ISR Functions ============================
//=================================================================

void EXTI0_IRQHandler(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<0 ;
 8000708:	4b05      	ldr	r3, [pc, #20]	; (8000720 <EXTI0_IRQHandler+0x1c>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a04      	ldr	r2, [pc, #16]	; (8000720 <EXTI0_IRQHandler+0x1c>)
 800070e:	f043 0301 	orr.w	r3, r3, #1
 8000712:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[0]();
 8000714:	4b03      	ldr	r3, [pc, #12]	; (8000724 <EXTI0_IRQHandler+0x20>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4798      	blx	r3
}
 800071a:	bf00      	nop
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40010400 	.word	0x40010400
 8000724:	20000040 	.word	0x20000040

08000728 <EXTI1_IRQHandler>:

void EXTI1_IRQHandler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<1 ;
 800072c:	4b05      	ldr	r3, [pc, #20]	; (8000744 <EXTI1_IRQHandler+0x1c>)
 800072e:	695b      	ldr	r3, [r3, #20]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <EXTI1_IRQHandler+0x1c>)
 8000732:	f043 0302 	orr.w	r3, r3, #2
 8000736:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[1]();
 8000738:	4b03      	ldr	r3, [pc, #12]	; (8000748 <EXTI1_IRQHandler+0x20>)
 800073a:	685b      	ldr	r3, [r3, #4]
 800073c:	4798      	blx	r3
}
 800073e:	bf00      	nop
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40010400 	.word	0x40010400
 8000748:	20000040 	.word	0x20000040

0800074c <EXTI2_IRQHandler>:

void EXTI2_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<2 ;
 8000750:	4b05      	ldr	r3, [pc, #20]	; (8000768 <EXTI2_IRQHandler+0x1c>)
 8000752:	695b      	ldr	r3, [r3, #20]
 8000754:	4a04      	ldr	r2, [pc, #16]	; (8000768 <EXTI2_IRQHandler+0x1c>)
 8000756:	f043 0304 	orr.w	r3, r3, #4
 800075a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[2]();
 800075c:	4b03      	ldr	r3, [pc, #12]	; (800076c <EXTI2_IRQHandler+0x20>)
 800075e:	689b      	ldr	r3, [r3, #8]
 8000760:	4798      	blx	r3
}
 8000762:	bf00      	nop
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40010400 	.word	0x40010400
 800076c:	20000040 	.word	0x20000040

08000770 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<3 ;
 8000774:	4b05      	ldr	r3, [pc, #20]	; (800078c <EXTI3_IRQHandler+0x1c>)
 8000776:	695b      	ldr	r3, [r3, #20]
 8000778:	4a04      	ldr	r2, [pc, #16]	; (800078c <EXTI3_IRQHandler+0x1c>)
 800077a:	f043 0308 	orr.w	r3, r3, #8
 800077e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[3]();
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <EXTI3_IRQHandler+0x20>)
 8000782:	68db      	ldr	r3, [r3, #12]
 8000784:	4798      	blx	r3
}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40010400 	.word	0x40010400
 8000790:	20000040 	.word	0x20000040

08000794 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
	EXTI->PR |= 1<<4 ;
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <EXTI4_IRQHandler+0x1c>)
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	4a04      	ldr	r2, [pc, #16]	; (80007b0 <EXTI4_IRQHandler+0x1c>)
 800079e:	f043 0310 	orr.w	r3, r3, #16
 80007a2:	6153      	str	r3, [r2, #20]
	GP_IRQ_CALLBACK[4]();
 80007a4:	4b03      	ldr	r3, [pc, #12]	; (80007b4 <EXTI4_IRQHandler+0x20>)
 80007a6:	691b      	ldr	r3, [r3, #16]
 80007a8:	4798      	blx	r3
}
 80007aa:	bf00      	nop
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	40010400 	.word	0x40010400
 80007b4:	20000040 	.word	0x20000040

080007b8 <Get_CRLH_Position>:
 *      Author: USER
 */
#include "STM32F103C6_GPIO_Driver.h"

uint8_t Get_CRLH_Position(uint16_t PinNumber)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	80fb      	strh	r3, [r7, #6]
	switch(PinNumber)
 80007c2:	88fb      	ldrh	r3, [r7, #6]
 80007c4:	2b80      	cmp	r3, #128	; 0x80
 80007c6:	d042      	beq.n	800084e <Get_CRLH_Position+0x96>
 80007c8:	2b80      	cmp	r3, #128	; 0x80
 80007ca:	dc11      	bgt.n	80007f0 <Get_CRLH_Position+0x38>
 80007cc:	2b08      	cmp	r3, #8
 80007ce:	d036      	beq.n	800083e <Get_CRLH_Position+0x86>
 80007d0:	2b08      	cmp	r3, #8
 80007d2:	dc06      	bgt.n	80007e2 <Get_CRLH_Position+0x2a>
 80007d4:	2b02      	cmp	r3, #2
 80007d6:	d02e      	beq.n	8000836 <Get_CRLH_Position+0x7e>
 80007d8:	2b04      	cmp	r3, #4
 80007da:	d02e      	beq.n	800083a <Get_CRLH_Position+0x82>
 80007dc:	2b01      	cmp	r3, #1
 80007de:	d028      	beq.n	8000832 <Get_CRLH_Position+0x7a>
 80007e0:	e047      	b.n	8000872 <Get_CRLH_Position+0xba>
 80007e2:	2b20      	cmp	r3, #32
 80007e4:	d02f      	beq.n	8000846 <Get_CRLH_Position+0x8e>
 80007e6:	2b40      	cmp	r3, #64	; 0x40
 80007e8:	d02f      	beq.n	800084a <Get_CRLH_Position+0x92>
 80007ea:	2b10      	cmp	r3, #16
 80007ec:	d029      	beq.n	8000842 <Get_CRLH_Position+0x8a>
 80007ee:	e040      	b.n	8000872 <Get_CRLH_Position+0xba>
 80007f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007f4:	d033      	beq.n	800085e <Get_CRLH_Position+0xa6>
 80007f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80007fa:	dc09      	bgt.n	8000810 <Get_CRLH_Position+0x58>
 80007fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000800:	d029      	beq.n	8000856 <Get_CRLH_Position+0x9e>
 8000802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000806:	d028      	beq.n	800085a <Get_CRLH_Position+0xa2>
 8000808:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800080c:	d021      	beq.n	8000852 <Get_CRLH_Position+0x9a>
 800080e:	e030      	b.n	8000872 <Get_CRLH_Position+0xba>
 8000810:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000814:	d027      	beq.n	8000866 <Get_CRLH_Position+0xae>
 8000816:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800081a:	dc03      	bgt.n	8000824 <Get_CRLH_Position+0x6c>
 800081c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000820:	d01f      	beq.n	8000862 <Get_CRLH_Position+0xaa>
 8000822:	e026      	b.n	8000872 <Get_CRLH_Position+0xba>
 8000824:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000828:	d01f      	beq.n	800086a <Get_CRLH_Position+0xb2>
 800082a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800082e:	d01e      	beq.n	800086e <Get_CRLH_Position+0xb6>
 8000830:	e01f      	b.n	8000872 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:
		return 0;
 8000832:	2300      	movs	r3, #0
 8000834:	e01e      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_1:
		return 4;
 8000836:	2304      	movs	r3, #4
 8000838:	e01c      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_2:
		return 8;
 800083a:	2308      	movs	r3, #8
 800083c:	e01a      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_3:
		return 12;
 800083e:	230c      	movs	r3, #12
 8000840:	e018      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_4:
		return 16;
 8000842:	2310      	movs	r3, #16
 8000844:	e016      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_5:
		return 20;
 8000846:	2314      	movs	r3, #20
 8000848:	e014      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_6:
		return 24;
 800084a:	2318      	movs	r3, #24
 800084c:	e012      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_7:
		return 28;
 800084e:	231c      	movs	r3, #28
 8000850:	e010      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_8:
		return 0;
 8000852:	2300      	movs	r3, #0
 8000854:	e00e      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_9:
		return 4;
 8000856:	2304      	movs	r3, #4
 8000858:	e00c      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_10:
		return 8;
 800085a:	2308      	movs	r3, #8
 800085c:	e00a      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_11:
		return 12;
 800085e:	230c      	movs	r3, #12
 8000860:	e008      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_12:
		return 16;
 8000862:	2310      	movs	r3, #16
 8000864:	e006      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_13:
		return 20;
 8000866:	2314      	movs	r3, #20
 8000868:	e004      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_14:
		return 24;
 800086a:	2318      	movs	r3, #24
 800086c:	e002      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;
	case GPIO_PIN_15:
		return 28;
 800086e:	231c      	movs	r3, #28
 8000870:	e000      	b.n	8000874 <Get_CRLH_Position+0xbc>
		break;


	}
	return 0;
 8000872:	2300      	movs	r3, #0

}
 8000874:	4618      	mov	r0, r3
 8000876:	370c      	adds	r7, #12
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <MCAL_GPIO_Init>:
 * @retval 				-none
 * Note					-STM32F103C6 MCU has GPIO A,B,C,D,E Modules
 * 							But LQFP48 Package has only GPIO A,B,PART OF C/D exported as external PINs from MCU
 */
void MCAL_GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_PinConfig_t* PinConfig)
{
 800087e:	b590      	push	{r4, r7, lr}
 8000880:	b085      	sub	sp, #20
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
	//Port configuration register low (GPIOx_CRL) Configure PINS from 0 >>> 7
	//Port configuration register High (GPIOx_CRH) Configure PINS from 8 >>> 15

	volatile uint32_t *ConfigRegister= NULL ;
 8000888:	2300      	movs	r3, #0
 800088a:	60fb      	str	r3, [r7, #12]
	volatile uint8_t Pin_Config = 0 ;
 800088c:	2300      	movs	r3, #0
 800088e:	72fb      	strb	r3, [r7, #11]
	ConfigRegister = (PinConfig->GPIO_PinNumber < GPIO_PIN_8 )? &GPIOx->CRL :&GPIOx->CRH ;
 8000890:	683b      	ldr	r3, [r7, #0]
 8000892:	881b      	ldrh	r3, [r3, #0]
 8000894:	2bff      	cmp	r3, #255	; 0xff
 8000896:	d801      	bhi.n	800089c <MCAL_GPIO_Init+0x1e>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	e001      	b.n	80008a0 <MCAL_GPIO_Init+0x22>
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3304      	adds	r3, #4
 80008a0:	60fb      	str	r3, [r7, #12]

	//clear CNF8[1:0] MODE8[1:0]

	(*ConfigRegister) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	881b      	ldrh	r3, [r3, #0]
 80008a6:	4618      	mov	r0, r3
 80008a8:	f7ff ff86 	bl	80007b8 <Get_CRLH_Position>
 80008ac:	4603      	mov	r3, r0
 80008ae:	461a      	mov	r2, r3
 80008b0:	230f      	movs	r3, #15
 80008b2:	4093      	lsls	r3, r2
 80008b4:	43da      	mvns	r2, r3
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	401a      	ands	r2, r3
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	601a      	str	r2, [r3, #0]

	//if Pin is output
	if (PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_PP|| PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_OD || PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_PP)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	789b      	ldrb	r3, [r3, #2]
 80008c4:	2b05      	cmp	r3, #5
 80008c6:	d00b      	beq.n	80008e0 <MCAL_GPIO_Init+0x62>
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	789b      	ldrb	r3, [r3, #2]
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d007      	beq.n	80008e0 <MCAL_GPIO_Init+0x62>
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	789b      	ldrb	r3, [r3, #2]
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d003      	beq.n	80008e0 <MCAL_GPIO_Init+0x62>
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	789b      	ldrb	r3, [r3, #2]
 80008dc:	2b06      	cmp	r3, #6
 80008de:	d10f      	bne.n	8000900 <MCAL_GPIO_Init+0x82>
	{
		Pin_Config = ((((PinConfig->GPIO_MODE - 4) << 2 ) | (PinConfig->GPIO_Output_Speed))) & 0x0F ;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	789b      	ldrb	r3, [r3, #2]
 80008e4:	3b04      	subs	r3, #4
 80008e6:	009b      	lsls	r3, r3, #2
 80008e8:	b25a      	sxtb	r2, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	78db      	ldrb	r3, [r3, #3]
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25b      	sxtb	r3, r3
 80008f4:	b2db      	uxtb	r3, r3
 80008f6:	f003 030f 	and.w	r3, r3, #15
 80008fa:	b2db      	uxtb	r3, r3
 80008fc:	72fb      	strb	r3, [r7, #11]
 80008fe:	e02d      	b.n	800095c <MCAL_GPIO_Init+0xde>
	}
	//if Pin is input
	else
	{
		//if  analog mode of input floating
		if (PinConfig->GPIO_MODE == GPIO_MODE_ANALOG || PinConfig->GPIO_MODE == GPIO_MODE_INPUT_FLO) //if  analog mode of input floating
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	789b      	ldrb	r3, [r3, #2]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d003      	beq.n	8000910 <MCAL_GPIO_Init+0x92>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	789b      	ldrb	r3, [r3, #2]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d108      	bne.n	8000922 <MCAL_GPIO_Init+0xa4>
		{
			Pin_Config = ((((PinConfig->GPIO_MODE << 2 )) | 0x0) & 0x0F) ;
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	789b      	ldrb	r3, [r3, #2]
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	b2db      	uxtb	r3, r3
 8000918:	f003 030f 	and.w	r3, r3, #15
 800091c:	b2db      	uxtb	r3, r3
 800091e:	72fb      	strb	r3, [r7, #11]
 8000920:	e01c      	b.n	800095c <MCAL_GPIO_Init+0xde>
		}
		else if(PinConfig->GPIO_MODE == GPIO_MODE_OUTPUT_AF_INPUT) //if mode is Alternative input it considered as input floating
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	789b      	ldrb	r3, [r3, #2]
 8000926:	2b08      	cmp	r3, #8
 8000928:	d102      	bne.n	8000930 <MCAL_GPIO_Init+0xb2>
		{
			Pin_Config = ((((GPIO_MODE_INPUT_FLO << 2 )) | 0x0) & 0x0F) ;
 800092a:	2304      	movs	r3, #4
 800092c:	72fb      	strb	r3, [r7, #11]
 800092e:	e015      	b.n	800095c <MCAL_GPIO_Init+0xde>
		}
		else //then mode is PP or PU
		{
			Pin_Config = ((((GPIO_MODE_INPUT_PU << 2 )) | 0x0) & 0x0F) ;
 8000930:	2308      	movs	r3, #8
 8000932:	72fb      	strb	r3, [r7, #11]
			if(PinConfig->GPIO_MODE == GPIO_MODE_INPUT_PU)
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	789b      	ldrb	r3, [r3, #2]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d107      	bne.n	800094c <MCAL_GPIO_Init+0xce>
			{
				GPIOx->ODR |= (PinConfig->GPIO_PinNumber) ;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	683a      	ldr	r2, [r7, #0]
 8000942:	8812      	ldrh	r2, [r2, #0]
 8000944:	431a      	orrs	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	e007      	b.n	800095c <MCAL_GPIO_Init+0xde>
			}
			else
			{
				GPIOx->ODR &= ~(PinConfig->GPIO_PinNumber);
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	683a      	ldr	r2, [r7, #0]
 8000952:	8812      	ldrh	r2, [r2, #0]
 8000954:	43d2      	mvns	r2, r2
 8000956:	401a      	ands	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	60da      	str	r2, [r3, #12]
			}
		}
	}

	//write on the CRL or CRH
	(*ConfigRegister) |= (Pin_Config << Get_CRLH_Position(PinConfig->GPIO_PinNumber)) ;
 800095c:	7afb      	ldrb	r3, [r7, #11]
 800095e:	b2db      	uxtb	r3, r3
 8000960:	461c      	mov	r4, r3
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	4618      	mov	r0, r3
 8000968:	f7ff ff26 	bl	80007b8 <Get_CRLH_Position>
 800096c:	4603      	mov	r3, r0
 800096e:	fa04 f203 	lsl.w	r2, r4, r3
 8000972:	68fb      	ldr	r3, [r7, #12]
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	431a      	orrs	r2, r3
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	601a      	str	r2, [r3, #0]
}
 800097c:	bf00      	nop
 800097e:	3714      	adds	r7, #20
 8000980:	46bd      	mov	sp, r7
 8000982:	bd90      	pop	{r4, r7, pc}

08000984 <MCAL_GPIO_ReadPin>:
 * @param [in] 			-PinNumber: Set Pin Number according @ref GPIO_PINS_define
 * @retval				-The input pin value (two values based on @ref GPIO_PIN_state )
 * Note					-none
 */
uint8_t MCAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx,uint16_t PinNumber)
{
 8000984:	b480      	push	{r7}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	460b      	mov	r3, r1
 800098e:	807b      	strh	r3, [r7, #2]
	uint8_t Bit_State ;
	if ((GPIOx->IDR & PinNumber) != (uint16_t)GPIO_PIN_RESET)
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	689a      	ldr	r2, [r3, #8]
 8000994:	887b      	ldrh	r3, [r7, #2]
 8000996:	4013      	ands	r3, r2
 8000998:	2b00      	cmp	r3, #0
 800099a:	d002      	beq.n	80009a2 <MCAL_GPIO_ReadPin+0x1e>
	{
		Bit_State = GPIO_PIN_SET ;
 800099c:	2301      	movs	r3, #1
 800099e:	73fb      	strb	r3, [r7, #15]
 80009a0:	e001      	b.n	80009a6 <MCAL_GPIO_ReadPin+0x22>
	}
	else
	{
		Bit_State = GPIO_PIN_RESET ;
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]
	}

	return Bit_State ;
 80009a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3714      	adds	r7, #20
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr

080009b2 <MCAL_GPIO_WritePin>:
 * @param [in] 			-GPIOx: where x can be (A...E depending on device used) to select the GPIO peripheral
 * @retval				-none
 * Note					-none
 */
void MCAL_GPIO_WritePin(GPIO_TypeDef* GPIOx,uint16_t PinNumber,uint8_t value)
{
 80009b2:	b480      	push	{r7}
 80009b4:	b083      	sub	sp, #12
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	6078      	str	r0, [r7, #4]
 80009ba:	460b      	mov	r3, r1
 80009bc:	807b      	strh	r3, [r7, #2]
 80009be:	4613      	mov	r3, r2
 80009c0:	707b      	strb	r3, [r7, #1]
	if (value != (uint8_t)GPIO_PIN_RESET)
 80009c2:	787b      	ldrb	r3, [r7, #1]
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d003      	beq.n	80009d0 <MCAL_GPIO_WritePin+0x1e>
	{
		//GPIOx->ODR |= PinNumber ;
		//or
		GPIOx->BSRR = PinNumber ;
 80009c8:	887a      	ldrh	r2, [r7, #2]
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	611a      	str	r2, [r3, #16]
	{
		//GPIOx->ODR &= ~PinNumber;
		//or
		GPIOx->BRR = PinNumber ;
	}
}
 80009ce:	e002      	b.n	80009d6 <MCAL_GPIO_WritePin+0x24>
		GPIOx->BRR = PinNumber ;
 80009d0:	887a      	ldrh	r2, [r7, #2]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	615a      	str	r2, [r3, #20]
}
 80009d6:	bf00      	nop
 80009d8:	370c      	adds	r7, #12
 80009da:	46bd      	mov	sp, r7
 80009dc:	bc80      	pop	{r7}
 80009de:	4770      	bx	lr

080009e0 <MCAL_GPIO_WritePort>:
 * @param [in] 			-GPIOx: where x can be (A...E depending on device used) to select the GPIO peripheral
 * @retval				-none
 * Note					-none
 */
void MCAL_GPIO_WritePort(GPIO_TypeDef* GPIOx,uint16_t value)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
 80009e8:	460b      	mov	r3, r1
 80009ea:	807b      	strh	r3, [r7, #2]
	GPIOx->ODR = (uint16_t) value;
 80009ec:	887a      	ldrh	r2, [r7, #2]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	60da      	str	r2, [r3, #12]
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bc80      	pop	{r7}
 80009fa:	4770      	bx	lr

080009fc <clock_init>:
#define SIX 0x02
#define SEVEN 0x19
#define EIGHT 0x00
#define NINE 0x10
void clock_init()
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
	//Enable clock GPIO
	RCC_GPIOA_CLK_EN();
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <clock_init+0x24>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	4a06      	ldr	r2, [pc, #24]	; (8000a20 <clock_init+0x24>)
 8000a06:	f043 0304 	orr.w	r3, r3, #4
 8000a0a:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8000a0c:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <clock_init+0x24>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a03      	ldr	r2, [pc, #12]	; (8000a20 <clock_init+0x24>)
 8000a12:	f043 0308 	orr.w	r3, r3, #8
 8000a16:	6193      	str	r3, [r2, #24]
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bc80      	pop	{r7}
 8000a1e:	4770      	bx	lr
 8000a20:	40021000 	.word	0x40021000

08000a24 <GPIO_init>:

void GPIO_init()
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
	GPIO_PinConfig_t PinCfg;
	PinCfg.GPIO_PinNumber = GPIO_PIN_9;
 8000a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a2e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE	  = GPIO_MODE_OUTPUT_PP;
 8000a30:	2304      	movs	r3, #4
 8000a32:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000a34:	2301      	movs	r3, #1
 8000a36:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	4619      	mov	r1, r3
 8000a3c:	4827      	ldr	r0, [pc, #156]	; (8000adc <GPIO_init+0xb8>)
 8000a3e:	f7ff ff1e 	bl	800087e <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = GPIO_PIN_10;
 8000a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a46:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE	  = GPIO_MODE_OUTPUT_PP;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a50:	1d3b      	adds	r3, r7, #4
 8000a52:	4619      	mov	r1, r3
 8000a54:	4821      	ldr	r0, [pc, #132]	; (8000adc <GPIO_init+0xb8>)
 8000a56:	f7ff ff12 	bl	800087e <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = GPIO_PIN_11;
 8000a5a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a5e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE	  = GPIO_MODE_OUTPUT_PP;
 8000a60:	2304      	movs	r3, #4
 8000a62:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000a64:	2301      	movs	r3, #1
 8000a66:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	481b      	ldr	r0, [pc, #108]	; (8000adc <GPIO_init+0xb8>)
 8000a6e:	f7ff ff06 	bl	800087e <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = GPIO_PIN_12;
 8000a72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a76:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE	  = GPIO_MODE_OUTPUT_PP;
 8000a78:	2304      	movs	r3, #4
 8000a7a:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a80:	1d3b      	adds	r3, r7, #4
 8000a82:	4619      	mov	r1, r3
 8000a84:	4815      	ldr	r0, [pc, #84]	; (8000adc <GPIO_init+0xb8>)
 8000a86:	f7ff fefa 	bl	800087e <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = GPIO_PIN_13;
 8000a8a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a8e:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE	  = GPIO_MODE_OUTPUT_PP;
 8000a90:	2304      	movs	r3, #4
 8000a92:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000a94:	2301      	movs	r3, #1
 8000a96:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000a98:	1d3b      	adds	r3, r7, #4
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	480f      	ldr	r0, [pc, #60]	; (8000adc <GPIO_init+0xb8>)
 8000a9e:	f7ff feee 	bl	800087e <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = GPIO_PIN_14;
 8000aa2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000aa6:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE	  = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2304      	movs	r3, #4
 8000aaa:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000aac:	2301      	movs	r3, #1
 8000aae:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ab0:	1d3b      	adds	r3, r7, #4
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	4809      	ldr	r0, [pc, #36]	; (8000adc <GPIO_init+0xb8>)
 8000ab6:	f7ff fee2 	bl	800087e <MCAL_GPIO_Init>
	PinCfg.GPIO_PinNumber = GPIO_PIN_15;
 8000aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000abe:	80bb      	strh	r3, [r7, #4]
	PinCfg.GPIO_MODE	  = GPIO_MODE_OUTPUT_PP;
 8000ac0:	2304      	movs	r3, #4
 8000ac2:	71bb      	strb	r3, [r7, #6]
	PinCfg.GPIO_Output_Speed = GPIO_Speed_10M;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	71fb      	strb	r3, [r7, #7]
	MCAL_GPIO_Init(GPIOB, &PinCfg);
 8000ac8:	1d3b      	adds	r3, r7, #4
 8000aca:	4619      	mov	r1, r3
 8000acc:	4803      	ldr	r0, [pc, #12]	; (8000adc <GPIO_init+0xb8>)
 8000ace:	f7ff fed6 	bl	800087e <MCAL_GPIO_Init>
}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	40010c00 	.word	0x40010c00

08000ae0 <main>:

int main (void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b08c      	sub	sp, #48	; 0x30
 8000ae4:	af00      	add	r7, sp, #0
	EXTI_PinConfig_t EXTI_CHG;
	EXTI_CHG.EXIT_PIN = EXTI0_GPIOA0;
 8000ae6:	4a3c      	ldr	r2, [pc, #240]	; (8000bd8 <main+0xf8>)
 8000ae8:	f107 0318 	add.w	r3, r7, #24
 8000aec:	ca07      	ldmia	r2, {r0, r1, r2}
 8000aee:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	clock_init();
 8000af2:	f7ff ff83 	bl	80009fc <clock_init>
	LCD_INIT();
 8000af6:	f7ff fcc9 	bl	800048c <LCD_INIT>
	Keypad_init();
 8000afa:	f7ff fb39 	bl	8000170 <Keypad_init>
	GPIO_init();
 8000afe:	f7ff ff91 	bl	8000a24 <GPIO_init>
	unsigned char key_pressed;
	LCD_WRITE_STRING("HEY");
 8000b02:	4836      	ldr	r0, [pc, #216]	; (8000bdc <main+0xfc>)
 8000b04:	f7ff fdd2 	bl	80006ac <LCD_WRITE_STRING>
	my_wait(15);
 8000b08:	200f      	movs	r0, #15
 8000b0a:	f7ff fc61 	bl	80003d0 <my_wait>
	LCD_clear_screen();
 8000b0e:	f7ff fc7b 	bl	8000408 <LCD_clear_screen>
	unsigned char LCD_display[11] = {'0','1','2','3','4','5','6','7','8','9','0'};
 8000b12:	4a33      	ldr	r2, [pc, #204]	; (8000be0 <main+0x100>)
 8000b14:	f107 030c 	add.w	r3, r7, #12
 8000b18:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b1a:	c303      	stmia	r3!, {r0, r1}
 8000b1c:	801a      	strh	r2, [r3, #0]
 8000b1e:	3302      	adds	r3, #2
 8000b20:	0c12      	lsrs	r2, r2, #16
 8000b22:	701a      	strb	r2, [r3, #0]
	unsigned char SEVEN_SEG_display[11] = {ZERO,ONE,TWO,THREE,FOUR,FIVE,SIX,SEVEN,EIGHT,NINE,ZERO};
 8000b24:	4a2f      	ldr	r2, [pc, #188]	; (8000be4 <main+0x104>)
 8000b26:	463b      	mov	r3, r7
 8000b28:	ca07      	ldmia	r2, {r0, r1, r2}
 8000b2a:	c303      	stmia	r3!, {r0, r1}
 8000b2c:	801a      	strh	r2, [r3, #0]
 8000b2e:	3302      	adds	r3, #2
 8000b30:	0c12      	lsrs	r2, r2, #16
 8000b32:	701a      	strb	r2, [r3, #0]
	unsigned char i = 0;
 8000b34:	2300      	movs	r3, #0
 8000b36:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	for(i=0;i<11;i++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b40:	e01f      	b.n	8000b82 <main+0xa2>
	{
		LCD_WRITE_CHAR(LCD_display[i]);
 8000b42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b46:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000b4a:	4413      	add	r3, r2
 8000b4c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8000b50:	4618      	mov	r0, r3
 8000b52:	f7ff fd89 	bl	8000668 <LCD_WRITE_CHAR>
		MCAL_GPIO_WritePort(GPIOB, SEVEN_SEG_display[i]<<9);
 8000b56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b5a:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000b5e:	4413      	add	r3, r2
 8000b60:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8000b64:	b29b      	uxth	r3, r3
 8000b66:	025b      	lsls	r3, r3, #9
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	481e      	ldr	r0, [pc, #120]	; (8000be8 <main+0x108>)
 8000b6e:	f7ff ff37 	bl	80009e0 <MCAL_GPIO_WritePort>
		my_wait(100);
 8000b72:	2064      	movs	r0, #100	; 0x64
 8000b74:	f7ff fc2c 	bl	80003d0 <my_wait>
	for(i=0;i<11;i++)
 8000b78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b82:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b86:	2b0a      	cmp	r3, #10
 8000b88:	d9db      	bls.n	8000b42 <main+0x62>
	}
	LCD_clear_screen();
 8000b8a:	f7ff fc3d 	bl	8000408 <LCD_clear_screen>
	Keypad_init();
 8000b8e:	f7ff faef 	bl	8000170 <Keypad_init>
	LCD_WRITE_STRING("Keypad is ready");
 8000b92:	4816      	ldr	r0, [pc, #88]	; (8000bec <main+0x10c>)
 8000b94:	f7ff fd8a 	bl	80006ac <LCD_WRITE_STRING>
	my_wait(30);
 8000b98:	201e      	movs	r0, #30
 8000b9a:	f7ff fc19 	bl	80003d0 <my_wait>
	LCD_clear_screen();
 8000b9e:	f7ff fc33 	bl	8000408 <LCD_clear_screen>
	while (1)
	{
		key_pressed = Keypad_getkey();
 8000ba2:	f7ff fb4b 	bl	800023c <Keypad_getkey>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
		switch (key_pressed) {
 8000bac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000bb0:	2b3f      	cmp	r3, #63	; 0x3f
 8000bb2:	d002      	beq.n	8000bba <main+0xda>
 8000bb4:	2b41      	cmp	r3, #65	; 0x41
 8000bb6:	d009      	beq.n	8000bcc <main+0xec>
 8000bb8:	e002      	b.n	8000bc0 <main+0xe0>
		case 'A':
			break;
		case '?':
			LCD_clear_screen();
 8000bba:	f7ff fc25 	bl	8000408 <LCD_clear_screen>
			break;
 8000bbe:	e006      	b.n	8000bce <main+0xee>
		default:
			LCD_WRITE_CHAR(key_pressed);
 8000bc0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f7ff fd4f 	bl	8000668 <LCD_WRITE_CHAR>
			break;
 8000bca:	e000      	b.n	8000bce <main+0xee>
			break;
 8000bcc:	bf00      	nop
		//			}
		//			if(MCAL_GPIO_ReadPin(GPIOA, GPIO_PIN_13)== 1)
		//			{
		//				MCAL_GPIO_TogglePin(GPIOA, GPIO_PIN_13);
		//			}
		my_wait(1);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f7ff fbfe 	bl	80003d0 <my_wait>
		key_pressed = Keypad_getkey();
 8000bd4:	e7e5      	b.n	8000ba2 <main+0xc2>
 8000bd6:	bf00      	nop
 8000bd8:	08000cb8 	.word	0x08000cb8
 8000bdc:	08000ca4 	.word	0x08000ca4
 8000be0:	08000cc4 	.word	0x08000cc4
 8000be4:	08000cd0 	.word	0x08000cd0
 8000be8:	40010c00 	.word	0x40010c00
 8000bec:	08000ca8 	.word	0x08000ca8

08000bf0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000bf2:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000bf4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bf8:	480c      	ldr	r0, [pc, #48]	; (8000c2c <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfa:	490d      	ldr	r1, [pc, #52]	; (8000c30 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bfc:	4a0d      	ldr	r2, [pc, #52]	; (8000c34 <LoopForever+0xe>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c00:	e002      	b.n	8000c08 <LoopCopyDataInit>

08000c02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c06:	3304      	adds	r3, #4

08000c08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c0c:	d3f9      	bcc.n	8000c02 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c0e:	4a0a      	ldr	r2, [pc, #40]	; (8000c38 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c10:	4c0a      	ldr	r4, [pc, #40]	; (8000c3c <LoopForever+0x16>)
  movs r3, #0
 8000c12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c14:	e001      	b.n	8000c1a <LoopFillZerobss>

08000c16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c18:	3204      	adds	r2, #4

08000c1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c1c:	d3fb      	bcc.n	8000c16 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c1e:	f000 f811 	bl	8000c44 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c22:	f7ff ff5d 	bl	8000ae0 <main>

08000c26 <LoopForever>:

LoopForever:
    b LoopForever
 8000c26:	e7fe      	b.n	8000c26 <LoopForever>
  ldr   r0, =_estack
 8000c28:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8000c2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c30:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000c34:	08000ce4 	.word	0x08000ce4
  ldr r2, =_sbss
 8000c38:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000c3c:	20000080 	.word	0x20000080

08000c40 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c40:	e7fe      	b.n	8000c40 <ADC1_2_IRQHandler>
	...

08000c44 <__libc_init_array>:
 8000c44:	b570      	push	{r4, r5, r6, lr}
 8000c46:	2500      	movs	r5, #0
 8000c48:	4e0c      	ldr	r6, [pc, #48]	; (8000c7c <__libc_init_array+0x38>)
 8000c4a:	4c0d      	ldr	r4, [pc, #52]	; (8000c80 <__libc_init_array+0x3c>)
 8000c4c:	1ba4      	subs	r4, r4, r6
 8000c4e:	10a4      	asrs	r4, r4, #2
 8000c50:	42a5      	cmp	r5, r4
 8000c52:	d109      	bne.n	8000c68 <__libc_init_array+0x24>
 8000c54:	f000 f81a 	bl	8000c8c <_init>
 8000c58:	2500      	movs	r5, #0
 8000c5a:	4e0a      	ldr	r6, [pc, #40]	; (8000c84 <__libc_init_array+0x40>)
 8000c5c:	4c0a      	ldr	r4, [pc, #40]	; (8000c88 <__libc_init_array+0x44>)
 8000c5e:	1ba4      	subs	r4, r4, r6
 8000c60:	10a4      	asrs	r4, r4, #2
 8000c62:	42a5      	cmp	r5, r4
 8000c64:	d105      	bne.n	8000c72 <__libc_init_array+0x2e>
 8000c66:	bd70      	pop	{r4, r5, r6, pc}
 8000c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c6c:	4798      	blx	r3
 8000c6e:	3501      	adds	r5, #1
 8000c70:	e7ee      	b.n	8000c50 <__libc_init_array+0xc>
 8000c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000c76:	4798      	blx	r3
 8000c78:	3501      	adds	r5, #1
 8000c7a:	e7f2      	b.n	8000c62 <__libc_init_array+0x1e>
 8000c7c:	08000cdc 	.word	0x08000cdc
 8000c80:	08000cdc 	.word	0x08000cdc
 8000c84:	08000cdc 	.word	0x08000cdc
 8000c88:	08000ce0 	.word	0x08000ce0

08000c8c <_init>:
 8000c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c8e:	bf00      	nop
 8000c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c92:	bc08      	pop	{r3}
 8000c94:	469e      	mov	lr, r3
 8000c96:	4770      	bx	lr

08000c98 <_fini>:
 8000c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c9a:	bf00      	nop
 8000c9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c9e:	bc08      	pop	{r3}
 8000ca0:	469e      	mov	lr, r3
 8000ca2:	4770      	bx	lr
